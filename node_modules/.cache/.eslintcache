[{"C:\\projects\\MaxxDogeDapp\\src\\index.js":"1","C:\\projects\\MaxxDogeDapp\\src\\App.js":"2","C:\\projects\\MaxxDogeDapp\\src\\reportWebVitals.js":"3","C:\\projects\\MaxxDogeDapp\\src\\features\\blockchain.js":"4","C:\\projects\\MaxxDogeDapp\\src\\pages\\index.js":"5","C:\\projects\\MaxxDogeDapp\\src\\pages\\Home.js":"6","C:\\projects\\MaxxDogeDapp\\src\\pages\\Dashboard.js":"7","C:\\projects\\MaxxDogeDapp\\src\\pages\\MintPage.js":"8","C:\\projects\\MaxxDogeDapp\\src\\components\\Hero.js":"9","C:\\projects\\MaxxDogeDapp\\src\\components\\Tokenomics.js":"10","C:\\projects\\MaxxDogeDapp\\src\\components\\About.js":"11","C:\\projects\\MaxxDogeDapp\\src\\components\\Roadmap.js":"12","C:\\projects\\MaxxDogeDapp\\src\\components\\Buy.js":"13","C:\\projects\\MaxxDogeDapp\\src\\components\\Staking.js":"14","C:\\projects\\MaxxDogeDapp\\src\\components\\Swapper.js":"15","C:\\projects\\MaxxDogeDapp\\src\\components\\Chart.js":"16","C:\\projects\\MaxxDogeDapp\\src\\components\\Socials.js":"17","C:\\projects\\MaxxDogeDapp\\src\\components\\Faq.js":"18","C:\\projects\\MaxxDogeDapp\\src\\components\\NavBar.js":"19","C:\\projects\\MaxxDogeDapp\\src\\components\\Footer.js":"20","C:\\projects\\MaxxDogeDapp\\src\\utils\\contracts-config.js":"21","C:\\projects\\MaxxDogeDapp\\src\\components\\Connect.js":"22"},{"size":1402,"mtime":1693579303190,"results":"23","hashOfConfig":"24"},{"size":484,"mtime":1693582098240,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1693579303192,"results":"26","hashOfConfig":"24"},{"size":565,"mtime":1693579303190,"results":"27","hashOfConfig":"24"},{"size":147,"mtime":1693582059986,"results":"28","hashOfConfig":"24"},{"size":953,"mtime":1693642045245,"results":"29","hashOfConfig":"24"},{"size":10439,"mtime":1693579303191,"results":"30","hashOfConfig":"24"},{"size":16022,"mtime":1693610405557,"results":"31","hashOfConfig":"24"},{"size":1218,"mtime":1693646625239,"results":"32","hashOfConfig":"24"},{"size":766,"mtime":1693642013226,"results":"33","hashOfConfig":"24"},{"size":946,"mtime":1693634796490,"results":"34","hashOfConfig":"24"},{"size":2757,"mtime":1693631539325,"results":"35","hashOfConfig":"24"},{"size":1426,"mtime":1693718873565,"results":"36","hashOfConfig":"24"},{"size":1090,"mtime":1693634616384,"results":"37","hashOfConfig":"24"},{"size":1666,"mtime":1693640587655,"results":"38","hashOfConfig":"24"},{"size":1204,"mtime":1693639059349,"results":"39","hashOfConfig":"24"},{"size":2177,"mtime":1693641291935,"results":"40","hashOfConfig":"24"},{"size":1555,"mtime":1693627838547,"results":"41","hashOfConfig":"24"},{"size":1628,"mtime":1693642118456,"results":"42","hashOfConfig":"24"},{"size":540,"mtime":1693587596918,"results":"43","hashOfConfig":"24"},{"size":364,"mtime":1693607118229,"results":"44","hashOfConfig":"24"},{"size":4685,"mtime":1693579303188,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16ol1ig",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},"C:\\projects\\MaxxDogeDapp\\src\\index.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\App.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\reportWebVitals.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\features\\blockchain.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\pages\\index.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\pages\\Home.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\pages\\Dashboard.js",["117","118","119","120"],[],"import React, { useState, useEffect } from \"react\";\r\nimport NavBar from '../components/NavBar';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\"\r\nimport { ethers } from \"ethers\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { CircularProgress } from \"@mui/material\";\r\n\r\nimport nftContract from \"../artifacts/KryptoPunks.sol/KryptoPunks.json\";\r\nimport { nftContractAddress, ownerAddress, networkDeployedTo } from \"../utils/contracts-config\";\r\nimport networksMap from \"../utils/networksMap.json\";\r\n\r\nconst Dashboard = () => {\r\n    let navigate = useNavigate();\r\n    const data = useSelector((state) => state.blockchain.value)\r\n    const [appInfo, setAppInfo] = useState({\r\n        nftContractBalance: 0,\r\n        nftContractPaused: 1,\r\n        maxMintAmountPerTx: 5,\r\n        mintCost: 0\r\n    })\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    async function getAppInfo() {\r\n        if (data.network === networksMap[networkDeployedTo] & data.account !== \"\") {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n            const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, provider);\r\n\r\n            if (ownerAddress !== data.account) {\r\n                navigate(\"/\")\r\n            }\r\n\r\n            const balance = await provider.getBalance(nftContractAddress);\r\n            const ispaused = await nft_contract.callStatic.paused()\r\n            const _fee = await nft_contract.callStatic.cost()\r\n            const _maxMintAmount = await nft_contract.callStatic.maxMintAmountPerTx()\r\n\r\n            setAppInfo({\r\n                nftContractBalance: Number(ethers.utils.formatUnits(balance, \"ether\")),\r\n                nftContractPaused: Number(ispaused),\r\n                maxMintAmountPerTx: _maxMintAmount,\r\n                mintCost: Number(ethers.utils.formatUnits(_fee, \"ether\")),\r\n            })\r\n        } else {\r\n            navigate(\"/\")\r\n        }\r\n    }\r\n\r\n    async function changeMintCost() {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                const change_tx = await nft_contract.setCost(\r\n                    ethers.utils.parseEther(String(appInfo.mintCost), \"ether\")\r\n                )\r\n                await change_tx.wait();\r\n                setLoading(false)\r\n                window.location.reload()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async function changeMintAmount() {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                const change_tx = await nft_contract.setMaxMintAmountPerTx(appInfo.maxMintAmountPerTx)\r\n                await change_tx.wait();\r\n                setLoading(false)\r\n                window.location.reload()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async function withdraw() {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                const withdraw_tx = await nft_contract.withdraw()\r\n                await withdraw_tx.wait();\r\n                setLoading(false)\r\n                window.location.reload()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    async function changeContractState() {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            if (appInfo.nftContractPaused == 1) {\r\n                try {\r\n                    setLoading(true)\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                    const signer = provider.getSigner()\r\n                    const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                    const unpause_tx = await nft_contract.pause(2)\r\n                    await unpause_tx.wait();\r\n                    setLoading(false)\r\n                    window.location.reload()\r\n                } catch (error) {\r\n                    setLoading(false)\r\n                    window.alert(\"An error has occured\")\r\n                    console.log(error)\r\n                }\r\n            } else {\r\n                try {\r\n                    setLoading(true)\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                    const signer = provider.getSigner()\r\n                    const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                    const pause_tx = await nft_contract.pause(1)\r\n                    await pause_tx.wait();\r\n                    setLoading(false)\r\n                    window.location.reload()\r\n                } catch (error) {\r\n                    setLoading(false)\r\n                    window.alert(\"An error has occured\")\r\n                    console.log(error)\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (window.ethereum !== undefined) {\r\n            getAppInfo()\r\n        }\r\n    }, [data.account])\r\n\r\n\r\n    return (\r\n        <>\r\n            <NavBar />\r\n            <br />\r\n            <div className=\"dashboard-section\">\r\n                <h1 className=\"text-center\" style={{ paddingTop: \"30px\" }}>\r\n                    Owner Dashboard\r\n                </h1>\r\n                <div className=\"dashboard-container\">\r\n                    <div className=\"dashboard-content\">\r\n                        <div className='dashboard-row' >\r\n                            <div className='dashboard-left'>\r\n                                <label>Current contract balance : {appInfo.nftContractBalance} ETH</label>\r\n                            </div>\r\n                            <div className='dashboard-button-up'>\r\n                                <button className='btn btn-info' onClick={withdraw}>\r\n                                    {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"withdraw\"}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className='dashboard-row'>\r\n                            <div className='dashboard-left'>\r\n                                <label>Max NFT minted per transaction : </label>\r\n                                <Form.Control type=\"Number\"\r\n                                    value={appInfo.maxMintAmountPerTx}\r\n                                    onChange={(e) => setAppInfo({ ...appInfo, maxMintAmountPerTx: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className='dashboard-button' >\r\n                                <button className='btn btn-info' onClick={changeMintAmount}>\r\n                                    {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Change\"}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <div className='dashboard-row'>\r\n                            <div className='dashboard-left'>\r\n                                <label>NFT mint cost (ETH) : </label>\r\n                                <Form.Control type=\"Number\"\r\n                                    value={appInfo.mintCost}\r\n                                    onChange={(e) => setAppInfo({ ...appInfo, mintCost: e.target.value })}\r\n                                />\r\n                            </div>\r\n                            <div className='dashboard-button' >\r\n                                <button className='btn btn-info' onClick={changeMintCost}>\r\n                                    {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Change\"}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                        <div className='dashboard-row'>\r\n                            <div className='dashboard-left'>\r\n                                <label>\r\n                                    {appInfo.nftContractPaused == 1 ? (\r\n                                        \"Nft Contract is paused\"\r\n                                    ) : (\r\n                                        \"Nft Contract is active\"\r\n                                    )}\r\n                                </label>\r\n                            </div>\r\n                            <div className='dashboard-button-up'>\r\n                                <button className='btn btn-info' onClick={changeContractState}>\r\n                                    {appInfo.nftContractPaused == 1 ? (\r\n                                        loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Activate\"\r\n                                    ) : (\r\n                                        loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Pause\"\r\n                                    )}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\projects\\MaxxDogeDapp\\src\\pages\\MintPage.js",["121","122","123","124","125"],[],"import React, { useState, useEffect } from 'react';\r\nimport \"../assets/styles.css\";\r\nimport image1 from \"../assets/img/mint-punk.png\";\r\nimport NavBar from '../components/NavBar';\r\nimport Footer from '../components/Footer';\r\nimport { useSelector } from \"react-redux\";\r\nimport { ethers } from \"ethers\";\r\nimport axios from \"axios\"\r\nimport { Table } from \"react-bootstrap\";\r\nimport { CircularProgress } from \"@mui/material\"\r\n\r\nimport stakingContract from \"../artifacts/NFTStakingVault.sol/NFTStakingVault.json\";\r\nimport nftContract from \"../artifacts/KryptoPunks.sol/KryptoPunks.json\";\r\nimport { stakingContractAddress, nftContractAddress, ownerAddress, networkDeployedTo } from \"../utils/contracts-config\";\r\nimport networksMap from \"../utils/networksMap.json\";\r\n\r\nfunction MintPage() {\r\n    const data = useSelector((state) => state.blockchain.value)\r\n\r\n    const [mintAmount, setMintAmount] = useState(1)\r\n    const [userNfts, setUserNfts] = useState([])\r\n    const [info, setInfo] = useState({\r\n        currentSupply: 0,\r\n        maxSupply: 99,\r\n        maxMintAmountPerTx: 20,\r\n        mintCost: 550,\r\n        paused: 1,\r\n        userNftIds: [],\r\n        stakedNftIds: [],\r\n        totalReward: 0\r\n    })\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const getInfo = async () => {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n            const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, provider);\r\n            const staking_contract = new ethers.Contract(stakingContractAddress, stakingContract.abi, provider);\r\n\r\n            const signer = provider.getSigner()\r\n            const user = await signer.getAddress()\r\n\r\n            const stakedTokens = Array.from((await staking_contract.tokensOfOwner(user)), x => Number(x))\r\n            const reward = await staking_contract.getTotalRewardEarned(user)\r\n\r\n            const paused = await nft_contract.paused()\r\n            var userTokens = Array.from((await nft_contract.tokensOfOwner(user)), x => Number(x))\r\n            const maxMintAmountPerTx = await nft_contract.maxMintAmountPerTx()\r\n            const cost = await nft_contract.cost()\r\n            const baseURI = await nft_contract.baseURI()\r\n            const baseExtension = await nft_contract.baseExtension()\r\n            const totalSupply = await nft_contract.totalSupply()\r\n            const maxSupply = await nft_contract.maxSupply()\r\n\r\n            userTokens = userTokens.concat(stakedTokens).sort()\r\n\r\n            setInfo({\r\n                currentSupply: Number(totalSupply),\r\n                maxSupply: Number(maxSupply),\r\n                maxMintAmountPerTx: Number(maxMintAmountPerTx),\r\n                mintCost: Number(ethers.utils.formatUnits(cost, \"WPWR\")),\r\n                paused: Number(paused),\r\n                userNftIds: userTokens,\r\n                stakedNftIds: stakedTokens,\r\n                totalReward: Number(ethers.utils.formatUnits(reward, \"WPWR\"))\r\n            })\r\n\r\n            const _userNfts = await Promise.all(userTokens.map(async (nft) => {\r\n                const metadata = await axios.get(\r\n                    baseURI.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\") + \"/\" + nft.toString() + baseExtension\r\n                )\r\n                return {\r\n                    id: nft,\r\n                    uri: metadata.data.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")\r\n                }\r\n            }))\r\n\r\n            setUserNfts(_userNfts)\r\n        }\r\n    }\r\n\r\n    const mint = async () => {\r\n        if (data.network === networksMap[networkDeployedTo] && info.paused == 2) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                if (data.account === ownerAddress) {\r\n                    const mint_tx = await nft_contract.mint(mintAmount)\r\n                    await mint_tx.wait()\r\n                } else {\r\n                    const totalMintCost = ethers.utils.parseEther(String(info.mintCost * mintAmount), \"WPWR\")\r\n                    const mint_tx = await nft_contract.mint(mintAmount, { value: totalMintCost })\r\n                    await mint_tx.wait()\r\n                }\r\n                setLoading(false)\r\n                getInfo()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured, Please Try Again\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const stakeItem = async (id) => {\r\n        console.log([id])\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            console.log([id])\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const nft_contract = new ethers.Contract(nftContractAddress, nftContract.abi, signer);\r\n                const staking_contract = new ethers.Contract(stakingContractAddress, stakingContract.abi, signer);\r\n\r\n                const approve_tx = await nft_contract.approve(stakingContractAddress, id)\r\n                await approve_tx.wait()\r\n\r\n                console.log([id])\r\n                const stake_tx = await staking_contract.stake([id])\r\n                await stake_tx.wait()\r\n\r\n                setLoading(false)\r\n                getInfo()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured, Please Try Again\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const unstakeItem = async (id) => {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const staking_contract = new ethers.Contract(stakingContractAddress, stakingContract.abi, signer);\r\n\r\n                const unstake_tx = await staking_contract.unstake([id])\r\n                await unstake_tx.wait()\r\n\r\n                setLoading(false)\r\n                getInfo()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured, Please Try Again\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const unstakeAll = async () => {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const staking_contract = new ethers.Contract(stakingContractAddress, stakingContract.abi, signer);\r\n\r\n                const unstake_tx = await staking_contract.unstake(info.stakedNftIds)\r\n                await unstake_tx.wait()\r\n\r\n                setLoading(false)\r\n                getInfo()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured, Please Try Again\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const claim = async () => {\r\n        if (data.network === networksMap[networkDeployedTo]) {\r\n            try {\r\n                setLoading(true)\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n                const signer = provider.getSigner()\r\n                const staking_contract = new ethers.Contract(stakingContractAddress, stakingContract.abi, signer);\r\n\r\n                const claim_tx = await staking_contract.claim(info.stakedNftIds)\r\n                await claim_tx.wait()\r\n\r\n                setLoading(false)\r\n                getInfo()\r\n            } catch (error) {\r\n                setLoading(false)\r\n                window.alert(\"An error has occured, Please Try Again\")\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getInfo()\r\n    }, [data.account])\r\n\r\n    return (\r\n        <section>\r\n            <NavBar />\r\n            <br />\r\n            <section className=\"claim\" id=\"claim\">\r\n                <div className=\"roadmap-container\"  >\r\n                    <div className='info-container'>\r\n                        <h3 className='text-center p-2'>Minting Info</h3>\r\n                        <Table responsive>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='p-2'>Total Collection Supply</td>\r\n                                    <td>{info.maxSupply}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Minted NFT Count</td>\r\n                                    <td>{info.currentSupply}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Mint Cost</td>\r\n                                    <td>{info.mintCost} WPWR</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Max Mint Amount Per TX </td>\r\n                                    <td>{info.maxMintAmountPerTx} </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table >\r\n                    </div>\r\n                    <div className='info-container'>\r\n                        <h3 className='text-center p-2'>Staking Info</h3>\r\n                        <Table responsive>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='p-2'>Your MaxDogeNFTs </td>\r\n                                    <td>[{info.userNftIds.join(\" \")}]</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Items Count</td>\r\n                                    <td>{info.userNftIds.length}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Items Staked</td>\r\n                                    <td>[{info.stakedNftIds.join(\" \")}]</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='p-2'>Earned Reward</td>\r\n                                    <td>\r\n                                        {info.totalReward !== 0 ?\r\n                                            parseFloat(info.totalReward).toFixed(6) : 0\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table >\r\n                        <div style={{ textAlign: \"center\" }} >\r\n                            <button className=\"btn btn-info m-3\" src=\"\" onClick={claim}>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Claim\"}\r\n                            </button>\r\n                            <button className=\"btn btn-info m-3\" src=\"\" onClick={unstakeAll}>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"Unstake All\"}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"roadmap-container\" >\r\n                    <div className='mint-container'>\r\n                        <div className=\"row\" style={{ justifyContent: \"center\" }}>\r\n                            <div className=\"col-md-7\">\r\n                                <div className=\"text-center\">\r\n                                    <h2 className=\"minttitle title\">\r\n                                        Mint Your MaxDogeNFTs\r\n                                    </h2>\r\n                                    <img src={image1} className=\"mint-img\" alt=\"\" />\r\n                                    <p className=\"lead\" style={{ marginBottom: \"30px\" }}>A MaxDogeNFT is a character that is On Maxx Chain and Ready to gooooo! Maximum 5 per Transaction. Only 1200 WPWR</p>\r\n                                    <div className=\"form-group\" >\r\n                                        <div className=\"d-flex justify-content-center\">\r\n                                            <button type=\"button\"\r\n                                                className=\"minus btn btn-info rounded-circle\"\r\n                                                disabled={mintAmount === 1}\r\n                                                onClick={() => { setMintAmount(mintAmount - 1) }}>-</button>\r\n                                            <input type=\"number\" className=\"mintnum text-center\" readOnly value={mintAmount} />\r\n                                            <button type=\"button\"\r\n                                                className=\"plus btn btn-info rounded-circle\"\r\n                                                disabled={mintAmount === info.maxMintAmountPerTx}\r\n                                                onClick={() => { setMintAmount(mintAmount + 1) }}>+</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button className=\"btn btn-info mt-3\" onClick={mint}>\r\n                                                {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"MINT\"}\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section className='my-items'>\r\n                {userNfts.length !== 0 ? (\r\n                    <>\r\n                        <h2 className=\"minttitle title text-center\">My MaxDogeNFTs</h2>\r\n                        <div className='items container'>\r\n                            {userNfts.map((nft, index) => {\r\n                                return (\r\n                                    <div className='item-box' key={index}>\r\n                                        <img src={nft.uri} className=\"item-img\" />\r\n                                        <div className='text-center'>\r\n                                            {info.stakedNftIds.includes(nft.id) ? (\r\n                                                <button className=\"btn btn-info m-3\" role=\"button\" onClick={() => { unstakeItem(nft.id) }}>\r\n                                                    {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"UNSTAKE\"}\r\n                                                </button>\r\n                                            ) : (\r\n                                                <button className=\"btn btn-info m-3\" role=\"button\"\r\n                                                    onClick={() => { stakeItem(nft.id) }}>\r\n                                                    {loading ? <CircularProgress color=\"inherit\" size={18} /> : \"STAKE\"}\r\n                                                </button>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </>\r\n                ) : null}\r\n            </section>\r\n            <Footer />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default MintPage;\r\n","C:\\projects\\MaxxDogeDapp\\src\\components\\Hero.js",["126"],[],"import React from 'react';\r\nimport \"../assets/styles.css\";\r\nimport NavBar from './NavBar';\r\nimport { AiOutlineGithub } from \"react-icons/ai\";\r\nimport logo from '../assets/logo.png'; // Import your logo image\r\n\r\nfunction Hero() {\r\n    return (\r\n        <section className='hero'>\r\n            <NavBar />\r\n            <div className=\"logo-container\">\r\n                <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n            </div>\r\n            <div className=\"caption\">\r\n                <p className='text-center' style={{ color: \"#fff\", fontSize: \"20px\" }}>MaxxDoge</p>\r\n\r\n                <div className=\"caption-inner\">\r\n                    <a href=\"https://twitter.com/MaxxdogeToken\">\r\n                        <button className=\"btn btn-danger\" style={{ color: \"#000\" }}>\r\n                          Twitter\r\n                        </button>\r\n                    </a>\r\n                    <a href=\"https://t.me/maxxdoge\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <button className=\"btn btn-info\">\r\n                            Telegram\r\n                        </button>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Hero;\r\n","C:\\projects\\MaxxDogeDapp\\src\\components\\Tokenomics.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\About.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Roadmap.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Buy.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Staking.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Swapper.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Chart.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Socials.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Faq.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\NavBar.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Footer.js",["127","128"],[],"import React from 'react'\r\nimport { AiOutlineTwitter, AiOutlineGithub } from \"react-icons/ai\";\r\nimport { RiDiscordFill } from \"react-icons/ri\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className='footer container'>\r\n            <p>Maxx Doge&#169; All Right Reserved</p>\r\n            <div className='social'>\r\n                <a href='https://twitter.com/MaxxdogeToken' >\r\n                    <AiOutlineTwitter size={24} color=\"#000\" />\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","C:\\projects\\MaxxDogeDapp\\src\\utils\\contracts-config.js",[],[],"C:\\projects\\MaxxDogeDapp\\src\\components\\Connect.js",["129"],[],"import React, { useState, useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { updateAccountData, disconnect } from \"../features/blockchain\"\r\nimport { ethers, utils } from \"ethers\"\r\nimport { Modal } from \"react-bootstrap\"\r\nimport Web3Modal from \"web3modal\"\r\n\r\nimport networks from \"../utils/networksMap.json\"\r\nimport { ownerAddress } from \"../utils/contracts-config\"\r\n\r\n\r\nconst eth = window.ethereum\r\nlet web3Modal = new Web3Modal()\r\n\r\nfunction Connect() {\r\n    const dispatch = useDispatch()\r\n    const data = useSelector((state) => state.blockchain.value)\r\n\r\n    const [injectedProvider, setInjectedProvider] = useState();\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    async function fetchAccountData() {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            const connection = await web3Modal.connect()\r\n            const provider = new ethers.providers.Web3Provider(connection)\r\n\r\n            setInjectedProvider(provider);\r\n\r\n            const signer = provider.getSigner()\r\n            const chainId = await provider.getNetwork()\r\n            const account = await signer.getAddress()\r\n            const balance = await signer.getBalance()\r\n\r\n            dispatch(updateAccountData(\r\n                {\r\n                    account: account,\r\n                    balance: utils.formatUnits(balance),\r\n                    network: networks[String(chainId.chainId)]\r\n                }\r\n            ))\r\n            console.log({\r\n                account: account,\r\n                balance: utils.formatUnits(balance),\r\n                network: networks[String(chainId.chainId)]\r\n            })\r\n        }\r\n        else {\r\n            console.log(\"Please install metamask\")\r\n            window.alert(\"Please Install Metamask\")\r\n        }\r\n    }\r\n\r\n    async function Disconnect() {\r\n        web3Modal.clearCachedProvider();\r\n        if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n            await injectedProvider.provider.disconnect();\r\n            setInjectedProvider(null)\r\n        }\r\n        dispatch(disconnect())\r\n        setShow(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (eth) {\r\n            eth.on('chainChanged', (chainId) => {\r\n                fetchAccountData()\r\n            })\r\n            eth.on('accountsChanged', (accounts) => {\r\n                fetchAccountData()\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const isConnected = data.account !== \"\"\r\n\r\n    return (\r\n\r\n        <>\r\n            {isConnected ? (\r\n                <>\r\n                    <button className=\"btn btn-secondary m-2 rounded\"\r\n                        onClick={handleShow}\r\n                    >\r\n                        {data.account &&\r\n                            `${data.account.slice(0, 6)}...${data.account.slice(\r\n                                data.account.length - 6,\r\n                                data.account.length\r\n                            )}`}\r\n                    </button>\r\n                    <Modal show={show} onHide={handleClose}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>User</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <p>Account: {data.account}</p>\r\n                            <p>Balance: {data.balance && parseFloat(data.balance).toFixed(4)} ETH</p>\r\n                            <p>Network: {data.network}</p>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {data.account === ownerAddress ? (\r\n                                <a className='btn btn-secondary mt-3'\r\n                                    href={\"/owner-dashboard\"}\r\n                                    role=\"button\">\r\n                                    Dashboard\r\n                                </a>\r\n                            ) : null}\r\n                            <button\r\n                                className=\"btn btn-danger mt-3\"\r\n                                onClick={Disconnect}>\r\n                                Disconnect\r\n                            </button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </>\r\n            ) : (\r\n                <button className=\"btn btn-secondary m-2 rounded\" onClick={fetchAccountData} src=\"\">\r\n                    Connect Wallet\r\n                </button>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Connect;\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"130","severity":1,"message":"131","line":111,"column":43,"nodeType":"132","messageId":"133","endLine":111,"endColumn":45},{"ruleId":"134","severity":1,"message":"135","line":150,"column":8,"nodeType":"136","endLine":150,"endColumn":22,"suggestions":"137"},{"ruleId":"130","severity":1,"message":"131","line":208,"column":64,"nodeType":"132","messageId":"133","endLine":208,"endColumn":66},{"ruleId":"130","severity":1,"message":"131","line":217,"column":64,"nodeType":"132","messageId":"133","endLine":217,"endColumn":66},{"ruleId":"130","severity":1,"message":"131","line":83,"column":76,"nodeType":"132","messageId":"133","endLine":83,"endColumn":78},{"ruleId":"134","severity":1,"message":"138","line":200,"column":8,"nodeType":"136","endLine":200,"endColumn":22,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":309,"column":41,"nodeType":"142","endLine":309,"endColumn":83},{"ruleId":"143","severity":1,"message":"144","line":312,"column":49,"nodeType":"142","endLine":312,"endColumn":140},{"ruleId":"143","severity":1,"message":"144","line":316,"column":49,"nodeType":"142","endLine":317,"endColumn":91},{"ruleId":"145","severity":1,"message":"146","line":4,"column":10,"nodeType":"147","messageId":"148","endLine":4,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":2,"column":28,"nodeType":"147","messageId":"148","endLine":2,"endColumn":43},{"ruleId":"145","severity":1,"message":"149","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":23},{"ruleId":"134","severity":1,"message":"150","line":76,"column":8,"nodeType":"136","endLine":76,"endColumn":10,"suggestions":"151"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAppInfo'. Either include it or remove the dependency array.","ArrayExpression",["152"],"React Hook useEffect has a missing dependency: 'getInfo'. Either include it or remove the dependency array.",["153"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","no-unused-vars","'AiOutlineGithub' is defined but never used.","Identifier","unusedVar","'RiDiscordFill' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchAccountData'. Either include it or remove the dependency array.",["154"],{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [data.account, getAppInfo]",{"range":"161","text":"162"},"Update the dependencies array to be: [data.account, getInfo]",{"range":"163","text":"164"},"Update the dependencies array to be: [fetchAccountData]",{"range":"165","text":"166"},[6214,6228],"[data.account, getAppInfo]",[8330,8344],"[data.account, getInfo]",[2591,2593],"[fetchAccountData]"]